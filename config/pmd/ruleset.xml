<?xml version="1.0"?>

<!--
    PMD rule sets for AOODAX

    Read first before adding any modifications:
    https://pmd.github.io/latest/pmd_userdocs_making_rulesets.html
-->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        name="AOODAX-Java-PMD"
        xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
        xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>
        PMD RuleSet for AOODAX Java development
    </description>

    <!-- Documentation for PMD Java rules: https://pmd.github.io/latest/pmd_rules_java.html -->

    <!-- rules most likely to apply everywhere, these are from quickstart.xml -->
    <rule ref="category/java/bestpractices.xml/AvoidMessageDigestField"/>
    <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
    <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
    <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
    <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
    <rule ref="category/java/bestpractices.xml/DoubleBraceInitialization"/>
    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>
    <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons"/>
    <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
    <rule ref="category/java/bestpractices.xml/MissingOverride"/>
    <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine"/>
    <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation"/>
    <rule ref="category/java/bestpractices.xml/SimplifiableTestAssertion"/>
    <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
    <rule ref="category/java/bestpractices.xml/UseStandardCharsets"/>

    <!-- NAMING CONVENTIONS -->
    <rule ref="category/java/codestyle.xml/ClassNamingConventions"/>
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions"/>
    <rule ref="category/java/codestyle.xml/GenericsNaming"/>
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions"/>
    <rule ref="category/java/codestyle.xml/PackageCase"/>

    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
    <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
    <rule ref="category/java/codestyle.xml/ExtendsObject"/>
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
    <rule ref="category/java/codestyle.xml/NoPackage"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryImport"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/codestyle.xml/UselessParentheses"/>
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>


    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
    <rule ref="category/java/design.xml/LogicInversion"/>

    <rule ref="category/java/design.xml/SimplifiedTernary"/>
    <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
    <rule ref="category/java/design.xml/SimplifyConditional"/>
    <rule ref="category/java/design.xml/UselessOverridingMethod"/>

    <rule ref="category/java/errorprone.xml/AssignmentInOperand">
        <properties>
            <property name="allowWhile" value="true"/>
        </properties>
    </rule>
    <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic"/>
    <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration"/>
    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>
    <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable"/>
    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>
    <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
    <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
    <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
    <rule ref="category/java/errorprone.xml/CheckSkipResult"/>
    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
    <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic"/>
    <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>
    <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>
    <rule ref="category/java/errorprone.xml/CloseResource"/>
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>
    <rule ref="category/java/errorprone.xml/ComparisonWithNaN"/>
    <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly"/>
    <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable"/>
    <rule ref="category/java/errorprone.xml/IdempotentOperations"/>
    <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough"/>
    <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
    <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
    <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass"/>
    <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>
    <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>
    <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
    <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>
    <rule ref="category/java/errorprone.xml/ProperLogger"/>
    <rule ref="category/java/errorprone.xml/ReturnEmptyCollectionRatherThanNull"/>
    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
    <rule ref="category/java/errorprone.xml/SingleMethodSingleton"/>
    <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance"/>
    <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
    <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
    <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape"/>
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>
    <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>
    <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions"/>

    <!-- Empty rules -->
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
    <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>
    <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
    <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>
    <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>
    <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>
    <rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>


    <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>
    <rule ref="category/java/multithreading.xml/AvoidUsingVolatile"/>
    <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>
    <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>
    <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
    <rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter"/>
    <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify"/>


    <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
    <rule ref="category/java/performance.xml/OptimizableToArrayCall"/>

    <!-- Best practices -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html -->
    <rule ref="category/java/bestpractices.xml/AccessorClassGeneration"/>
    <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration"/>
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>

    <rule ref="category/java/bestpractices.xml/UseVarargs"/>

    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>
    <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
    <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnitUseExpected"/>
    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../Annotation/NormalAnnotation[Name[@Image='AssertTrue'] and count(//ImportDeclaration/Name[@Image='javax.validation.constraints.AssertTrue']) = 1]
                or
                ../../Annotation/MarkerAnnotation[Name[@Image='PrePersist'] and count(//ImportDeclaration/Name[@Image='javax.persistence.PrePersist']) = 1]
                or
                ../../Annotation/MarkerAnnotation[Name[@Image='PreUpdate'] and count(//ImportDeclaration/Name[@Image='javax.persistence.PreUpdate']) = 1]
                or
                ../../Annotation/MarkerAnnotation[Name[@Image='PostLoad'] and count(//ImportDeclaration/Name[@Image='javax.persistence.PostLoad']) = 1]
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../../Annotation/*[Name[@Image='Mock'] and count(//ImportDeclaration/Name[@Image='org.mockito.Mock']) = 1]
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml/UnusedAssignment"/>

    <!-- Code Style -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html -->
    <rule ref="category/java/codestyle.xml/ConfusingTernary"/>
    <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
    <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
    <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention"/>
    <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention"/>
    <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention"/>
    <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention"/>
    <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention"/>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>
    <rule ref="category/java/codestyle.xml/ShortClassName"/>
    <rule ref="category/java/codestyle.xml/LongVariable">
        <properties>
            <!-- keep common sense, long names are self-documenting -->
            <property name="minimum" value="64"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ShortClassName">
        <properties>
            <property name="minimum" value="3"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../Annotation/*[Name[@Image='Test'] and count(//ImportDeclaration/Name[@Image='org.junit.Test']) = 1]
                or
                //ClassOrInterfaceDeclaration[matches(@Image,'.*Test$')]
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>

    <!-- Design -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_design.html -->
    <rule ref="category/java/design.xml/AvoidCatchingGenericException"/>
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
    <rule ref="category/java/design.xml/AvoidRethrowingException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
    <rule ref="category/java/design.xml/CyclomaticComplexity"/>

    <rule ref="category/java/design.xml/ExcessiveClassLength"/>
    <rule ref="category/java/design.xml/ExcessiveMethodLength"/>
    <rule ref="category/java/design.xml/ExcessiveParameterList"/>
    <rule ref="category/java/design.xml/ExcessivePublicCount"/>
    <rule ref="category/java/design.xml/GodClass"/>
    <rule ref="category/java/design.xml/ImmutableField"/>
    <rule ref="category/java/design.xml/NcssCount"/>
    <rule ref="category/java/design.xml/NPathComplexity"/>
    <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException"/>
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../../Annotation/*[Name[@Image='Test'] and count(//ImportDeclaration/Name[@Image='org.junit.Test']) = 1]
                or
                //ClassOrInterfaceDeclaration[matches(@Image,'.*Test$')]
            ]"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/CouplingBetweenObjects">
        <properties>
            <!-- Spring global controller advices may contain many references to "*Exception" classes -->
            <property name="violationSuppressXPath" value=".[
                //ClassOrInterfaceDeclaration[../Annotation/*/Name[@Image='RestControllerAdvice']]
                or
                //ClassOrInterfaceDeclaration[../Annotation/*/Name[@Image='ControllerAdvice']]
            ]"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
    <rule ref="category/java/design.xml/SwitchDensity"/>
    <rule ref="category/java/design.xml/TooManyFields"/>

    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="30"/>
            <!-- Spring global controller advices may contain many simple methods - 1 per Exception class, skip them -->
            <property name="violationSuppressXPath" value=".[
                //ClassOrInterfaceDeclaration[../Annotation/*/Name[@Image='RestControllerAdvice']]
                or
                //ClassOrInterfaceDeclaration[../Annotation/*/Name[@Image='ControllerAdvice']]
                or
                //ClassOrInterfaceDeclaration[matches(@Image,'.*Test$')]
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/ImmutableField">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../../../../../Annotation/*/Name[@Image='Setter']
                or
                ../../../../../../Annotation/*/Name[@Image='Data']
                or
                ../../../../../../Annotation/*/Name[@Image='NoArgsConstructor']
                or
                ../../../Annotation/*/Name[@Image='Setter']
                or
                ../../../Annotation/*/Name[@Image='CreatedDate']
                or
                ../../../Annotation/*/Name[@Image='LastModifiedDate']
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/SingularField">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../../../Annotation/*/Name[@Image='Setter']
                or
                ../../../../Annotation/*/Name[@Image='Getter']
                or
                ../../../../Annotation/*/Name[@Image='Data']
                or
                ../../../Annotation/*/Name[@Image='Setter']
                or
                ../../../Annotation/*/Name[@Image='Getter']
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../Annotation/NormalAnnotation[Name[@Image='NoArgsConstructor'] and MemberValuePairs//PrimaryPrefix/Name[@Image='AccessLevel.PRIVATE'] and count(//ImportDeclaration/Name[@Image='lombok.NoArgsConstructor']) = 1]
                or
                ../Annotation/NormalAnnotation[Name[@Image='NoArgsConstructor'] and MemberValuePairs//PrimaryPrefix/Name[@Image='AccessLevel.PROTECTED'] and count(//ImportDeclaration/Name[@Image='lombok.NoArgsConstructor']) = 1]
            ]"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/UseUtilityClass">
        <properties>
            <property name="violationSuppressXPath" value=".[
                ../../Annotation/NormalAnnotation[Name[@Image='NoArgsConstructor'] and MemberValuePairs//PrimaryPrefix/Name[@Image='AccessLevel.PRIVATE'] and count(//ImportDeclaration/Name[@Image='lombok.NoArgsConstructor']) = 1]
                or
                ../../Annotation/MarkerAnnotation/Name[@Image='UtilityClass' and count(//ImportDeclaration/Name[@Image='lombok.experimental.UtilityClass']) = 1]
                or
                ../../Annotation/*/Name[@Image='SpringBootApplication']
            ]"/>
        </properties>
    </rule>

    <!-- Documentation -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html -->
    <rule ref="category/java/documentation.xml/CommentSize">
        <properties>
            <property name="maxLines" value="12"/>
            <!-- synchronize with general line length rule -->
            <property name="maxLineLength" value="200"/>
        </properties>
    </rule>

    <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody">
        <properties>
            <!-- AspectJ pointcuts have empty method body with @Pointcut annotation -->
            <property name="violationSuppressXPath" value=".[
                ../../Annotation/SingleMemberAnnotation[Name[@Image='Pointcut'] and count(//ImportDeclaration/Name[@Image='org.aspectj.lang.annotation.Pointcut']) = 1]
            ]"/>
        </properties>
    </rule>

    <!-- Error Prone -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html -->
    <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>
    <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier"/>
    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod"/>
    <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale"/>
    <rule ref="category/java/errorprone.xml/DoNotTerminateVM"/>
    <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal"/>
    <rule ref="category/java/errorprone.xml/UseProperClassLoader"/>
    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>
    <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>
    <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize"/>
    <rule ref="category/java/errorprone.xml/FinalizeOverloaded"/>
    <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected"/>
    <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>
    <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging"/>
    <rule ref="category/java/errorprone.xml/InvalidLogMessageFormat"/>
    <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
    <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>

    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
    <rule ref="category/java/errorprone.xml/AvoidCatchingNPE"/>
    <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>
    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
    <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition"/>

    <!-- Multithreading -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html -->
    <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel"/>
    <rule ref="category/java/multithreading.xml/DoNotUseThreads"/>

    <!-- Performance -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html -->
    <rule ref="category/java/performance.xml/AddEmptyString"/>
    <rule ref="category/java/performance.xml/AvoidArrayLoops"/>
    <rule ref="category/java/performance.xml/RedundantFieldInitializer"/>
    <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement"/>
    <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>
    <rule ref="category/java/performance.xml/UseArraysAsList"/>
    <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>
    <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse"/>
    <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends"/>
    <rule ref="category/java/performance.xml/InefficientEmptyStringCheck"/>
    <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
    <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration"/>
    <rule ref="category/java/performance.xml/StringInstantiation"/>
    <rule ref="category/java/performance.xml/StringToString"/>
    <rule ref="category/java/performance.xml/UseIndexOfChar"/>
    <rule ref="category/java/performance.xml/UselessStringValueOf"/>
    <rule ref="category/java/performance.xml/UseStringBufferLength"/>

    <!-- Security -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_security.html -->
    <rule ref="category/java/security.xml/HardCodedCryptoKey"/>
    <rule ref="category/java/security.xml/InsecureCryptoIv"/>
</ruleset>
